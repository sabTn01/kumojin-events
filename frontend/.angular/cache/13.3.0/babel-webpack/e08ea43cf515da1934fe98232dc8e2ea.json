{"ast":null,"code":"import _asyncToGenerator from \"/Users/sbenhadj/Repositories/test/kumojin-events/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { KumojinEventFormComponent } from './kumojin-event-form.component';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { KumojinEventHttpService } from '../../../../foundation/mainstack/kumojin-events/services/kumojin-event-http.service';\nimport { Observable } from 'rxjs';\ndescribe('KumojinEventFormComponent', () => {\n  let component;\n  let fixture;\n  let mockService;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    mockService = jasmine.createSpyObj('KumojinEventHttpService', {\n      create: new Observable()\n    });\n    yield TestBed.configureTestingModule({\n      declarations: [KumojinEventFormComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [{\n        provide: KumojinEventHttpService,\n        useValue: mockService\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(KumojinEventFormComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('ngOnInit, should reset the event object', () => {\n    // Arrange\n    // Act\n    component.ngOnInit(); // Assert\n\n    expect(component.isLoading).toBeFalsy();\n    expect(component.kumojinEvent.startAt).toBeUndefined();\n    expect(component.kumojinEvent.endAt).toBeUndefined();\n    expect(component.kumojinEvent.displayName).toEqual('');\n    expect(component.kumojinEvent.description).toEqual('');\n  });\n  it('onSaveClick, should save the event', () => {\n    // Arrange\n    const eventMock = {\n      guid: 'guid',\n      displayName: 'name',\n      description: 'description',\n      startAt: new Date(2022, 1, 1, 0, 0, 0),\n      endAt: new Date(2022, 1, 1, 15, 0, 0),\n      countryAt: 'Spain'\n    }; // Act\n\n    mockService.create(eventMock).subscribe(() => {// Assert\n    });\n    component.onSaveClick(); // Assert\n\n    expect(component.isLoading).toBeFalsy();\n    expect(component.kumojinEvent.startAt).toBeUndefined();\n    expect(component.kumojinEvent.endAt).toBeUndefined();\n    expect(component.kumojinEvent.displayName).toEqual('');\n    expect(component.kumojinEvent.description).toEqual('');\n  });\n});","map":{"version":3,"sources":["/Users/sbenhadj/Repositories/test/kumojin-events/frontend/src/app/features/mainstack/kumojin-events/form/kumojin-event-form.component.spec.ts"],"names":["TestBed","KumojinEventFormComponent","FormsModule","HttpClientTestingModule","KumojinEventHttpService","Observable","describe","component","fixture","mockService","beforeEach","jasmine","createSpyObj","create","configureTestingModule","declarations","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","ngOnInit","isLoading","toBeFalsy","kumojinEvent","startAt","toBeUndefined","endAt","displayName","toEqual","description","eventMock","guid","Date","countryAt","subscribe","onSaveClick"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { KumojinEventFormComponent } from './kumojin-event-form.component';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { KumojinEventHttpService } from '../../../../foundation/mainstack/kumojin-events/services/kumojin-event-http.service';\nimport { Observable } from 'rxjs';\ndescribe('KumojinEventFormComponent', () => {\n    let component;\n    let fixture;\n    let mockService;\n    beforeEach(async () => {\n        mockService = jasmine.createSpyObj('KumojinEventHttpService', {\n            create: new Observable()\n        });\n        await TestBed.configureTestingModule({\n            declarations: [KumojinEventFormComponent],\n            imports: [HttpClientTestingModule, FormsModule],\n            providers: [{ provide: KumojinEventHttpService, useValue: mockService }],\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(KumojinEventFormComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('ngOnInit, should reset the event object', () => {\n        // Arrange\n        // Act\n        component.ngOnInit();\n        // Assert\n        expect(component.isLoading).toBeFalsy();\n        expect(component.kumojinEvent.startAt).toBeUndefined();\n        expect(component.kumojinEvent.endAt).toBeUndefined();\n        expect(component.kumojinEvent.displayName).toEqual('');\n        expect(component.kumojinEvent.description).toEqual('');\n    });\n    it('onSaveClick, should save the event', () => {\n        // Arrange\n        const eventMock = {\n            guid: 'guid',\n            displayName: 'name',\n            description: 'description',\n            startAt: new Date(2022, 1, 1, 0, 0, 0),\n            endAt: new Date(2022, 1, 1, 15, 0, 0),\n            countryAt: 'Spain'\n        };\n        // Act\n        mockService.create(eventMock).subscribe(() => {\n            // Assert\n        });\n        component.onSaveClick();\n        // Assert\n        expect(component.isLoading).toBeFalsy();\n        expect(component.kumojinEvent.startAt).toBeUndefined();\n        expect(component.kumojinEvent.endAt).toBeUndefined();\n        expect(component.kumojinEvent.displayName).toEqual('');\n        expect(component.kumojinEvent.description).toEqual('');\n    });\n});\n"]},"metadata":{},"sourceType":"module"}